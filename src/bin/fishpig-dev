#!/usr/bin/env php
<?php
/**
 *
 */
namespace FishPig\DevToolbox;

ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

define('OPT_SOURCE_INSTALL', 'source');
define('OPT_TARGET_PROJECT', 'project');
define('OPT_VERSION_BUMP', 'bump');

try {
    # Find Magento install
    $magentoPath = dirname(dirname(dirname(dirname(dirname(__DIR__)))));
    if (!is_dir($magentoPath) || !is_file($magentoPath . '/app/bootstrap.php')) {
        throw new \Exception('Unable to find Magento 2 installation at ' . $magentoPath);
    }

    chdir($magentoPath);
    require 'app/bootstrap.php';
    \Magento\Framework\App\Bootstrap::create(BP, $_SERVER);

    $args = array_merge(['action' => ''], __process_args($_SERVER['argv']));

    // If arg not set, try looking for shortcut
    if (empty($args['action'])) {
        // class.validate
        if (!empty($args['validate'])) {
            $args['action'] = 'class.validate';
            $args['class'] = $args['validate'];
        }
        
        if (empty($args['action'])) {
            throw new \InvalidArgumentException('No action set.');
        }
    }
    
    $actionFunc = '\FishPig\DevToolbox\\' . str_replace('.', '_', $args['action']);
    
    if (!is_callable($actionFunc)) {
        throw new \InvalidArgumentException($actionFunc . ' is not a callable function');
    }
    
    $actionFunc($args);
} catch (\Exception $e) {
    echo $e->getMessage();
    exit(1);
}

//
function __process_args(array $args)
{
    $params = [];
    foreach ($args as $arg) {
        if (strpos($arg, '--') === 0) {
            if (preg_match('/--([^=]+)(.*)/', $arg, $match)) {
                $params[$match[1]] = trim(ltrim($match[2], '=')) ?: true;
            } else {
                $params[ltrim($arg, '-')] = true;
            }
        }
    }
    
    return $params;
}

//
function sales_order_reset(array $args)
{
    $orderIds = !empty($args['order-id']) ? explode(',', $args['order-id']) : [];
        
    if (!($orderIds = array_filter(array_unique($orderIds)))) {
        return;
    }
    
    $orderRepository = _om()->get(\Magento\Sales\Model\OrderRepository::class);
    $resource = _resource();
    $db = _db();
    $fieldKeywords = ['invoiced', 'canceled', 'refunded', 'shipped'];
    $updateDataArray = function($data, $keywords) {
        $keywordLookupPattern = '/(' . implode('|', $keywords) . ')/';
        $updates = [];
        foreach ($data as $k => $v) {
            if (!is_object($v) && !is_array($v) && preg_match($keywordLookupPattern, $k)) {
                $updates[$k] = null;
            }
        }
        
        return $updates;
    }; 
    
    foreach ($orderIds as $orderId) {
        $order = $orderRepository->get($orderId);
        $cond = 'order_id=' . (int)$order->getId();   
        
        echo '#' . $order->getIncrementId() . ' (' . (int)$order->getId() . ')' . PHP_EOL;

        foreach (['invoice', 'creditmemo', 'shipment'] as $orderEntity) {
            $db->delete($resource->getTableName('sales_' . $orderEntity), $cond);
            $db->delete($resource->getTableName('sales_' . $orderEntity . '_grid'), $cond);
        }

        $db->delete($resource->getTableName('sales_order_status_history'), 'entity_name <> \'order\' AND parent_id=' . (int)$order->getId());
    
        // Update sales_order
        $db->update(
            $order->getResource()->getMainTable(),
            array_merge([  
                    'state' => 'new',
                    'status' => 'pending',
                    'base_total_due' => $order->getData('base_grand_total'),
                    'total_due' => $order->getData('grand_total'),
                    'total_paid' => 0.00
                ],
                $updateDataArray($order->getData(), $fieldKeywords)
            ),
            'entity_id=' . (int)$order->getId()
        );
        
        // Update sales_order_grid
        $db->update(
            $resource->getTableName('sales_order_grid'),
            [
                'status' => 'pending',
                'base_total_paid' => 0.00,
                'total_paid' => 0.00,
                'total_refunded' => 0.00
            ],
            'entity_id=' . (int)$order->getId()
        );
        
        // sales_order_item
        $itemData = $db->fetchAll($db->select()->from($resource->getTableName('sales_order_item'), '*')->where($cond));
        foreach ($itemData as $item) {
            if ($updates = $updateDataArray($item, $fieldKeywords)) {
                $db->update(
                    $resource->getTableName('sales_order_item'),
                    $updates,
                    $cond
                );
            }
        }
    }
}

//
function class_validate(array $args)
{
    if (empty($args['class'])) {
        throw new \InvalidArgumentException('--class is not set.');
    }
    
    $validateClass = function($className, $safety = 10) use (&$validateClass) {
        if (--$safety < 1) {
            throw new \RuntimeException(
                'The safey limit was hit trying to find ' . $className
            );
        }
    
	    try {
            $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
            $object = $objectManager->get($className);
            
            echo 'ok';
            //echo $className . ': ' . get_class($object) . PHP_EOL;
        } catch (\ReflectionException $e) {
            echo 'Error: ' . $e->getMessage();
        } catch (\Exception $e) {
            echo $className . ': ';
            echo 'Param Check' . PHP_EOL;
    
    	    $classReader = $objectManager->get('Magento\Framework\Code\Reader\ClassReader');
    
            foreach($classReader->getConstructor($className) as $param) {
                if ($param[1]) {
                    $validateClass($param[1], $safety);
                }
            }
        }
    };
    
    $validateClass($args['class']);
}


function module_create(array $args)
{
    define('TEMPLATE_PATH', dirname(__DIR__) . '/data/module_builder/');

    if (!is_dir(TEMPLATE_PATH)) {
        throw new \RuntimeException(
            sprintf("TEMPLATE_PATH does not exist at '%s'.", TEMPLATE_PATH)
        );
    }
    
    // Functions
    $get_processed_args = function($options = []) {
        $args = [];
    
        foreach (array_slice($_SERVER['argv'], 1) as $arg) {
            if (preg_match('/^--([^=]+)(=(.*))?/', $arg, $argMatch)) {   
                $key = $argMatch[1];
                if (isset($argMatch[3])) {
                    $value = $argMatch[3];
                } else {
                    $value = true;
                }
    
                $args[$key] = $value;
            } else {
                throw new \InvalidArgumentException(
                    sprintf(
                        "Unable to progress argument '%s'",
                        $arg
                    )
                );
            }
        }
    
        $args = array_merge($options['defaults'] ?? [], $args);
    
        if (!empty($options['callback_before_process']) && is_callable($options['callback_before_process'])) {
            $args = call_user_func($options['callback_before_process'], $args);
        }
    
        if (!empty($options['validate_path_fields'])) {
            foreach ($options['validate_path_fields'] as $field) {
                if (!empty($args[$field])) {
                    $firstChar = substr($args[$field], 0, 1);
                    
                    if ($firstChar === '~') {
                        throw new \InvalidArgumentException(
                            "Paths that start with ~ are not currently supported."
                        );
                    } elseif ($firstChar !== '/') {
                        $args[$field] = getcwd() . '/' . trim($args[$field]);
                    }
                }
            }
        }
        
        // Custom filter to stop strict false values being removed
        $args = array_filter(
            $args,
            function ($v) {
                return $v !== '' && $v !== null;
            }
        );
    
        // Check required arguments
        if (!empty($options['required'])) {
            if ($missingRequiredArgs = array_diff_key(array_flip($options['required']), $args)) {
                throw new \InvalidArgumentException(
                    sprintf(
                        "%d required argument(s) are missing. Missing arguments are: %s",
                        count($missingRequiredArgs),
                        "'" . implode("', '", array_keys($missingRequiredArgs)) . "'"
                    )
                );   
            }
        }
        
        if (!empty($options['callback_after_process']) && is_callable($options['callback_after_process'])) {
            $args = call_user_func($options['callback_after_process'], $args);
        }
    
        return $args;
    };

    //
    $fishpig_module_creator_create_file = function($sourceFile, array $args) {
        if (!is_file($sourceFile)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid template '%s' does not exist.",
                    $sourceFile
                )
            );
        }
    
        $template = (string)file_get_contents($sourceFile);
    
        if (trim($template) === '') {
            throw new \InvalidArgumentException(
                sprintf(
                    "Template '%s' is empty.",
                    $sourceFile
                )
            );
        }
        
        foreach ($args as $arg => $value) {
            $findReplace = [
                '%' . $arg . '%' => (string)$value,
                '%' . $arg . '.strtolower%' => strtolower((string)$value),
                '%' . $arg . '.strtoupper%' => strtoupper((string)$value),
            ];
            
            $template = str_replace(array_keys($findReplace), $findReplace, $template);
        }
        
        if (preg_match_all('/%[a-z\._]+%/', $template, $missingVariableMatches)) {
            throw new \RuntimeException(
                sprintf(
                    "%d variables missed in template '%s'.",
                    count($missingVariableMatches[0]),
                    "'" . implode("', '", $missingVariableMatches[0]) . "'",
                    $sourceFile
                )
            );
        }
        
        return $template;
    };

//
    $get_template_source_files = function($path) use (&$get_template_source_files) {
        $path = rtrim($path, '/');
        $files = [];
        if (is_dir($path)) {
            foreach (array_slice(scandir($path), 2) as $item) {
                $absolute = $path . '/' . $item;
                if (is_dir($absolute)) {
                    $files = array_merge($files, $get_template_source_files($absolute));
                } else {
                    $files[] = $absolute;
                }
            }
        }
        
        return $files;
    };

    $args = $get_processed_args(
        [
            'defaults' => [
                'overwrite' => false,
                'debug-args' => false,
                'help' => false
            ],
            'required' => [
                'target',
                'vendor',
                'module',
                'model',
            ],
            'validate_path_fields' => [
                'target',
            ],
            'callback_before_process' => function(array $args) {
                if (strpos($args['module'], '\\') !== false) {
                    list($vendor, $module) = explode('\\', $args['module']);

                    $args['vendor'] = $vendor;
                    $args['module'] = $module;
                }
                
                if (empty($args['target']) && !empty($args['vendor']) && !empty($args['module'])) {
                    $args['target'] = 'app/code/' . $args['vendor'] . '/' . $args['module'];
                }
                
                return $args;
            },
            'callback_after_process' => function(array $args) {   
                $args = array_merge(
                    [
                        'php_file_header' => "/**\n * @url FishPig.com\n */\ndeclare(strict_types=1);\n",
                        'namespace' => $args['vendor'] . '\\' . $args['module'],
                        'module_name' => $args['vendor'] . '_' . $args['module'],
                        'admin_route' => $args['admin-route'] ?? strtolower($args['module']),
                        'model_id_field' => $args['model-id-field-' . $args['model'] ] ?? strtolower($args['model']) . '_id',
                        'model_layout_prefix' => strtolower($args['module']) . '_' . strtolower($args['model']),
                    ],
                    $args
                );

                return $args;
            }
        ]
    );

    if ($args['debug-args']) {
        print_r($args);
        exit;
    }
    
    if ($args['help']) {
        echo sprintf(
            "%s --module=Vendor\\Module --model=SomeModel",
            $argv[0]
        );
        exit(0);
    }

    if (is_dir($args['target'])) {
        if ((int)$args['overwrite'] !== 1) {
            throw new \RuntimeException(
                sprintf(
                    "Target directory (%s) exists but the --overwrite argument was not passed.",
                    $args['target']
                )
            );
        }

        if (count(scandir($args['target'])) === 2) {
            // Dir is empty
            rmdir($args['target']);
        } elseif (!realpath($args['target']) || strpos(realpath($args['target']), getcwd()) !== 0) {
            throw new \RuntimeException(
                sprintf(
                    "Target directory (%s) exists but cannot be deleted as the path is not a child of the current directory.",
                    $args['target']
                )
            );
        } else {
            shell_exec('rm -rf ' . realpath($args['target']));
        }
    }

    mkdir($args['target']);
    
    if (!is_dir($args['target'])) {
        throw new \RuntimeException(
            sprintf(
                "Unable to create target directory at '%s'.",
                $args['target']
            )
        );
    }
    
    if (!($targetDir = realpath($args['target']))) {
        throw new \RuntimeException(
            sprintf(
                "Error validating target path '%s'.",
                $args['target']
            )
        );
    }

    $files = [];

    $findReplaceInPaths = [
        '_Module_' => $args['module'],
        '_module_' => strtolower($args['module']),
        '_Model_' => $args['model'],
        '_model_' => strtolower($args['model']),
    ];
    
    foreach ($get_template_source_files(TEMPLATE_PATH) as $sourceFile) {
        $code = $fishpig_module_creator_create_file($sourceFile, $args);
        
        $absoluteTargetFile = str_replace(
            array_keys($findReplaceInPaths),
            $findReplaceInPaths,
            $targetDir . '/' . str_replace(TEMPLATE_PATH, '', $sourceFile)
        );

        $absoluteTargetPath = dirname($absoluteTargetFile);

        if (!is_dir($absoluteTargetPath)) {
            mkdir($absoluteTargetPath, 0755, true);

            if (!is_dir($absoluteTargetPath)) {
                throw new \RuntimeException(
                    sprintf(
                        "Error creating file directory '%s' at '%s'.",
                        basename($absoluteTargetFile),
                        $absoluteTargetPath
                    )
                );
            }
        }
        
        file_put_contents($absoluteTargetFile, $code);

        if (!is_file($absoluteTargetFile)) {
            throw new \RuntimeException(
                sprintf(
                    "Error creating file '%s'.",
                    $absoluteTargetFile
                )
            );
        }
    }
}

//
function _om() {
    return \Magento\Framework\App\ObjectManager::getInstance();
}

function _resource() {
    return _om()->get(\Magento\Framework\App\ResourceConnection::class);
}

function _db($c = '') {
    return _resource()->getConnection($c);
}

